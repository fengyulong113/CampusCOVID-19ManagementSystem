{"remainingRequest":"C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\src\\components\\menu\\Teacher.vue?vue&type=template&id=47ba5e22&scoped=true&","dependencies":[{"path":"C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\src\\components\\menu\\Teacher.vue","mtime":1648615643441},{"path":"C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637570406894},{"path":"C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1648636261085},{"path":"C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637570406894},{"path":"C:\\Users\\冯潇洒\\Desktop\\Campus-epidemic-prevention-and-control-syste\\V2.0_Prevention\\vue_epidemic\\node_modules\\vue-loader\\lib\\index.js","mtime":1648636261085}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29tbW9uIiB9LCBbCiAgICBfYygKICAgICAgIm5hdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJtYWluLWhlYWRlciBuYXZiYXIgbmF2YmFyLWV4cGFuZCBuYXZiYXItd2hpdGUgbmF2YmFyLWxpZ2h0IgogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIm5hdmJhci1uYXYiIH0sIFsKICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAibGkiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0gZC1ub25lIGQtc20taW5saW5lLWJsb2NrIiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFnOiAiYSIsIHRvOiAiL3RlYWNoZXIvaG9tZSIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkhvbWUiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygKICAgICAgICAgICJ1bCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2YmFyLW5hdiBtbC1hdXRvIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZWwtZHJvcGRvd24iLAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImVsLWRyb3Bkb3duLWxpbmsiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtd2lkZ2V0IjogInB1c2htZW51IiwKICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogIiMiLAogICAgICAgICAgICAgICAgICAgICAgICByb2xlOiAiYnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogImVsLWljb24tcy10b29scyIgfSldCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJlbC1kcm9wZG93bi1tZW51IiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBzbG90OiAiZHJvcGRvd24iIH0sIHNsb3Q6ICJkcm9wZG93biIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImVsLWRyb3Bkb3duLWl0ZW0iLAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJlbC1pY29uLXN3aXRjaC1idXR0b24iIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZWwtYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ub3V0bG9naW4gfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigi6YCA5Ye655m75b2VIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZHJvcGRvd24tZGl2aWRlciIgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZHJvcGRvd24tZGl2aWRlciIgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZHJvcGRvd24tZGl2aWRlciIgfSkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdCiAgICApLAogICAgX2MoCiAgICAgICJhc2lkZSIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJtYWluLXNpZGViYXIgc2lkZWJhci1kYXJrLXByaW1hcnkgZWxldmF0aW9uLTQiIH0sCiAgICAgIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJicmFuZC1saW5rIiwgYXR0cnM6IHsgdG86ICIvYWRtaW4vaG9tZSIgfSB9LCBbCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImJyYW5kLWltYWdlIGltZy1jaXJjbGUgZWxldmF0aW9uLTMiLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBvcGFjaXR5OiAiLjgiIH0sCiAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogImRpc3QvaW1nL0FkbWluTFRFTG9nby5wbmciLCBhbHQ6ICJBZG1pbkxURSBMb2dvIiB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImJyYW5kLXRleHQgZm9udC13ZWlnaHQtbGlnaHQiLAogICAgICAgICAgICBkb21Qcm9wczogeyB0ZXh0Q29udGVudDogX3ZtLl9zKF92bS50eXBlKSB9CiAgICAgICAgICB9KQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2lkZWJhciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ1c2VyLXBhbmVsIG10LTMgcGItMyBtYi0zIGQtZmxleCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltYWdlIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWNpcmNsZSBlbGV2YXRpb24tMiIsCiAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjNyZW0iLCBoZWlnaHQ6ICIzcmVtIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0udG91eGlhbmcsIGFsdDogIlVzZXIgSW1hZ2UiIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbmZvIiB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImQtYmxvY2siLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0sCiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB0ZXh0Q29udGVudDogX3ZtLl9zKF92bS51c2VybmFtZSkgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJuYXYiLCB7IHN0YXRpY0NsYXNzOiAibXQtMiIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2IG5hdi1waWxscyBuYXYtc2lkZWJhciBmbGV4LWNvbHVtbiIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAiZGF0YS13aWRnZXQiOiAidHJlZXZpZXciLAogICAgICAgICAgICAgICAgICByb2xlOiAibWVudSIsCiAgICAgICAgICAgICAgICAgICJkYXRhLWFjY29yZGlvbiI6ICJmYWxzZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fbChfdm0ubmF2QWN0aXZlLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LAogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0YWc6ICJsaSIsIHRvOiBpdGVtLnBhdGggfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IGNsYXNzOiBpdGVtLmljb24gfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiICIgKyBfdm0uX3MoaXRlbS50aXRsZSkgKyAiICIpXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSBoYXMtdHJlZXZpZXciIH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuYXYgbmF2LXRyZWV2aWV3IiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFnOiAibGkiLCB0bzogIi90ZWFjaGVyL290cCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhciBmYS1jaXJjbGUgbmF2LWljb24iIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLnvqTogYoiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdGFnOiAibGkiLCB0bzogIi90ZWFjaGVyL290byIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhciBmYS1jaXJjbGUgbmF2LWljb24iIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCLnp4HogYoiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQtd3JhcHBlciIgfSwgWwogICAgICBfdm0uX20oMiksCiAgICAgIF9jKAogICAgICAgICJzZWN0aW9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbnQiLAogICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiNDhyZW0iLCAib3ZlcmZsb3cteSI6ICJzY3JvbGwiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImVsLXJvdyIsCiAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7IHBhZGRpbmc6ICIxMHB4IDEwcHgiIH0gfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImVsLWNvbCIsCiAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBzcGFuOiAyNCB9IH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFuc2l0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG5hbWU6ICJlbC1mYWRlLWluLWxpbmVhciIsIG1vZGU6ICJvdXQtaW4iIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgW19jKCJyb3V0ZXItdmlldyIpXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKQogICAgXSksCiAgICBfdm0uX20oMyksCiAgICBfYygiYXNpZGUiLCB7IHN0YXRpY0NsYXNzOiAiY29udHJvbC1zaWRlYmFyIGNvbnRyb2wtc2lkZWJhci1kYXJrIiB9KQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIgfSwgWwogICAgICBfYygKICAgICAgICAiYSIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsCiAgICAgICAgICBhdHRyczogeyAiZGF0YS13aWRnZXQiOiAicHVzaG1lbnUiLCBocmVmOiAiIyIsIHJvbGU6ICJidXR0b24iIH0KICAgICAgICB9LAogICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtYmFycyIgfSldCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiB9LCBbCiAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogIm5hdi1pY29uIGZhcyBmYS1jb3B5IiB9KSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCIg6IGK5aSpICIpLAogICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1hbmdsZS1sZWZ0IHJpZ2h0IiB9KSwKICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJiYWRnZSBiYWRnZS1pbmZvIHJpZ2h0IiB9LCBbX3ZtLl92KCIyIildKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50LWhlYWRlciIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IG1iLTIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLXNtLTYiIH0sIFsKICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogIm0tMCB0ZXh0LWRhcmsiIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZm9vdGVyIiwgeyBzdGF0aWNDbGFzczogIm1haW4tZm9vdGVyIiB9LCBbCiAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgX3ZtLl92KCIgQOa0qi0yMDIwLVZlcnNpb24gMi4wICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly9naXRlZS5jb20vaG9uZ2ppbGluIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigi5qCh5Zut55ar5oOF6Ziy5o6n566h55CG57O757ufIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIi4gIikKICAgICAgXSksCiAgICAgIF92bS5fdigiIEFsbCByaWdodHMgcmVzZXJ2ZWQuICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsb2F0LXJpZ2h0IGQtbm9uZSBkLXNtLWlubGluZS1ibG9jayIgfSwgWwogICAgICAgIF9jKCJiIiwgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLAogICAgICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXdpZGdldCI6ICJwdXNobWVudSIsIGhyZWY6ICIjIiwgcm9sZTogImJ1dHRvbiIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWJhcnMiIH0pXQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}